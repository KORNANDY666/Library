// <auto-generated />
using System;
using Library.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Library.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230509083157_first")]
    partial class first
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Library.Models.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookId"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookId");

                    b.ToTable("Book");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            Author = " Reidar Nilsen",
                            Title = "Code like a Pro"
                        },
                        new
                        {
                            BookId = 2,
                            Author = "Albert Einstein",
                            Title = "Fishing at night"
                        },
                        new
                        {
                            BookId = 3,
                            Author = "Stina Stinasson",
                            Title = "Murderer at the hospital"
                        },
                        new
                        {
                            BookId = 4,
                            Author = "Tony Tonysson",
                            Title = "Face to face"
                        },
                        new
                        {
                            BookId = 5,
                            Author = "My Mysson",
                            Title = "From dusk till dawn"
                        },
                        new
                        {
                            BookId = 6,
                            Author = "Mårten Mårtesson",
                            Title = "Run away"
                        });
                });

            modelBuilder.Entity("Library.Models.BookConnection", b =>
                {
                    b.Property<int>("BookConnectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookConnectionId"));

                    b.Property<DateTime>("Barrowed")
                        .HasColumnType("datetime2");

                    b.Property<int>("FK_BookId")
                        .HasColumnType("int");

                    b.Property<int>("FK_CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsReturned")
                        .HasColumnType("bit");

                    b.HasKey("BookConnectionId");

                    b.HasIndex("FK_BookId");

                    b.HasIndex("FK_CustomerId");

                    b.ToTable("BookConnections");

                    b.HasData(
                        new
                        {
                            BookConnectionId = 1,
                            Barrowed = new DateTime(2023, 5, 9, 10, 31, 57, 789, DateTimeKind.Local).AddTicks(2472),
                            FK_BookId = 1,
                            FK_CustomerId = 1,
                            IsReturned = false
                        },
                        new
                        {
                            BookConnectionId = 2,
                            Barrowed = new DateTime(2023, 5, 9, 10, 31, 57, 789, DateTimeKind.Local).AddTicks(2516),
                            FK_BookId = 2,
                            FK_CustomerId = 1,
                            IsReturned = false
                        },
                        new
                        {
                            BookConnectionId = 3,
                            Barrowed = new DateTime(2023, 5, 9, 10, 31, 57, 789, DateTimeKind.Local).AddTicks(2518),
                            FK_BookId = 4,
                            FK_CustomerId = 2,
                            IsReturned = true
                        },
                        new
                        {
                            BookConnectionId = 4,
                            Barrowed = new DateTime(2023, 5, 9, 10, 31, 57, 789, DateTimeKind.Local).AddTicks(2519),
                            FK_BookId = 6,
                            FK_CustomerId = 3,
                            IsReturned = true
                        },
                        new
                        {
                            BookConnectionId = 5,
                            Barrowed = new DateTime(2023, 5, 9, 10, 31, 57, 789, DateTimeKind.Local).AddTicks(2521),
                            FK_BookId = 5,
                            FK_CustomerId = 4,
                            IsReturned = false
                        },
                        new
                        {
                            BookConnectionId = 6,
                            Barrowed = new DateTime(2023, 5, 9, 10, 31, 57, 789, DateTimeKind.Local).AddTicks(2522),
                            FK_BookId = 6,
                            FK_CustomerId = 4,
                            IsReturned = false
                        });
                });

            modelBuilder.Entity("Library.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNr")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customer");

                    b.HasData(
                        new
                        {
                            CustomerId = 1,
                            Address = "Greger Vägen 10",
                            City = "Gregerstad",
                            Name = "Greger Gregersson",
                            PhoneNr = "1234567890",
                            PostCode = "12345"
                        },
                        new
                        {
                            CustomerId = 2,
                            Address = "Lena Vägen 99",
                            City = "Lenastad",
                            Name = "Lena Lenasson",
                            PhoneNr = "9876543210",
                            PostCode = "12346"
                        },
                        new
                        {
                            CustomerId = 3,
                            Address = "Stenvägen 66",
                            City = "Stenstad",
                            Name = "Sten Stensson",
                            PhoneNr = "19834563214",
                            PostCode = "23456"
                        },
                        new
                        {
                            CustomerId = 4,
                            Address = "Sivvägen 7",
                            City = "Sivstad",
                            Name = "Siv Sivsson",
                            PhoneNr = "23568971",
                            PostCode = "98765"
                        });
                });

            modelBuilder.Entity("Library.Models.BookConnection", b =>
                {
                    b.HasOne("Library.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("FK_BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("FK_CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Customer");
                });
#pragma warning restore 612, 618
        }
    }
}
